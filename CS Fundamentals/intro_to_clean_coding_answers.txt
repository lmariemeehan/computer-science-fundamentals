##Exercises

1. In your own words, explain what clean code is and why it is important.

Answer: Clean code refers to code that is readable (has good, descriptive naming practices for both functions and variables and doesn't rely on comments to explain what the code is supposed to do). Clean code also refers to code that is maintainable which means it's kept *Dry* and every function has a single responsibility.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Answer: Traffic Lights. They're coded to direct traffic as efficiently as possible and they respond differently depending on the period of the day it is (e.g., 5pm busy traffic jam hour versus 10AM which could be slow). Each color of the traffic light is set to run for a certain length of seconds and if two traffic lights at an intersection were poorly programmed (such as the timing was off) people could potentially get into an accident.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
Original:
FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Answer: Not the cleanest of code, it needs a more descriptive naming convention and could use some indentation for readability and to know which statements are within which constructs.

Refactored code:
FUNCTION changeTemperature(x, y)              // Creating a new function
 IF y = "fahrenheit" THEN                     // Check if y is equal "F"
    SET temperature to (x−32) * (5/9)         // Formula to convert degrees fahrenheit to celsius
    PRINT temperature;                        // Print result
 ELSE IF y = "celsius" THEN                   // If y not equal to "F", check if equal to "C"
    SET temperature to x * 1.8000 + 32.00     // Formula to convert degrees celsius to fahrenheit
    PRINT temperature;                        // Print result
 END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
Original:
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


Answer: The naming of the function should not be abbreviated and it could be refactored a bit logically. But other than that I think it looks clean. It has good structure with nice indentations, good readable names within the function itself, and has a single responsibility. The is how I would refactor it:

Refactored code:
FUNCTION calculatePercentage(sum, total)
  SET percentage to sum / total * 100
    IF NOT(sum = 0) THEN
        PRINT percentage
    ELSE
      PRINT "Sorry, cannot divide by 0"
    END IF
END FUNCTION


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
Original:
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactored code:
FUNCTION calculateTotal(subTotal, discountRate)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
END FUNCTION

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


b. The following function checks out a book if there are no issues with the guest's account.
Original:
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactored code:
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND IF guest.outstandingFees = 0 AND IF NOT(guest.hasOverdueBooks) THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
Original:
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactored code:

CLASS Balance
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION
 END CLASS

CLASS Deposit
 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION
 END CLASS

CLASS Withdraw
 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
 END CLASS

CLASS Offer
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION
 END CLASS

CLASS Status
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END CLASS


Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square- Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function giveRootOrSum (array) {
  let sum = array.reduce((a, b) => a + b);
  if (sum % Math.sqrt(sum) === 0) {
   return(Math.sqrt(sum));
  } else {
    return sum;
  }
}

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicate (array) {
    var counts = [];
    for(var i = 0; i <= array.length; i++) {
        if(counts[array[i]] === undefined) {
            counts[array[i]] = 1;
        } else {
            return true;
        }
    }
    return false;
}
