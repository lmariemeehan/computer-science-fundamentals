Exercises
For exercises requiring code, you are free to use the language of your choice.

Provide all the code and written answers in a file named stacks_and_queues.txt:

1. What is the main difference between a stack and a queue?

Answer: How the elements are prioritized. Stack will take care of the last element first (LIFO) while a queue will take care of the first element in line first (FIFO).

2. What are the similarities between stacks and queues?

Answer: They are both linear structures with flexible sizes that help engineers rank/prioritize tasks and they support system functions from becoming overwhelmed with all the tasks that need to be done.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

UPDATED Answer: For both UNDO and REDO, I would use the stack structure because you care about retrieving the last move you made. So with UNDO, the last move you made is stacked on top and that is the first one you want to handle (LIFO). And to able to utilize the REDO function, you have had to UNDO a move, which would be the last move you made and the first one you would want to address so it is also a LIFO.

Programming Questions
You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

Answer:
var stack = [];
var word = "Bloc!";
var reversedWord = "";
for (var i =0; i < word.length; i++) {
  stack.push(word[i]);
}
for (var i =0; i < word.length; i++) {
  reversedWord += stack.pop();
}
console.log(reversedWord);

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

>To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

Answer:
var queue = ['Jake', 'Laura', 'Thomas', 'Charlie'];
function Fifowannabe(array) {
  for (let i=0; i < array.length -1; i++) {
    var tempArray = array.shift();
    array.push(tempArray);
  }
  return array.shift();
}
console.log(Fifowannabe(queue));
console.log(queue);

3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

Answer:
function Queue() {
  var collection = [];
  this.enqueue = function(element) {
    return collection.push(element);
  };
  this.dequeue = function() {
    return collection.shift();
  }
}
